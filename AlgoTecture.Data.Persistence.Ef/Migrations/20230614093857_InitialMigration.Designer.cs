// <auto-generated />
using System;
using Algotecture.Data.Persistence.Ef;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Algotecture.Data.Persistence.Ef.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230614093857_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AlgoTecture.Domain.Models.RepositoryModels.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ContractDateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ContractFromUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ContractToUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeclarationDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("OwnerUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("PriceCurrency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("PriceSpecificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReservationId")
                        .HasColumnType("bigint");

                    b.Property<long>("SpaceId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("SubSpaceId")
                        .HasColumnType("uuid");

                    b.Property<long?>("TenantUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("TotalPrice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UtilizationTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("PriceSpecificationId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("SpaceId");

                    b.HasIndex("SubSpaceId");

                    b.HasIndex("TenantUserId");

                    b.HasIndex("UtilizationTypeId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("AlgoTecture.Domain.Models.RepositoryModels.PriceSpecification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("PriceCurrency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PricePerTime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("SpaceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SubSpaceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UnitOfTime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ValidThrough")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SpaceId");

                    b.ToTable("PriceSpecifications");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            PriceCurrency = "Usd",
                            PricePerTime = "50",
                            SpaceId = 1L,
                            UnitOfTime = "Hour"
                        },
                        new
                        {
                            Id = 2L,
                            PriceCurrency = "Usd",
                            PricePerTime = "45",
                            SpaceId = 2L,
                            UnitOfTime = "Hour"
                        },
                        new
                        {
                            Id = 3L,
                            PriceCurrency = "Usd",
                            PricePerTime = "60",
                            SpaceId = 3L,
                            UnitOfTime = "Hour"
                        });
                });

            modelBuilder.Entity("AlgoTecture.Domain.Models.RepositoryModels.Reservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("PriceSpecificationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ReservationDateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ReservationFromUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReservationStatus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ReservationToUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("SpaceId")
                        .HasColumnType("bigint");

                    b.Property<string>("SubSpaceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("TenantUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("TotalPrice")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("PriceSpecificationId");

                    b.HasIndex("SpaceId");

                    b.HasIndex("TenantUserId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            PriceSpecificationId = 1L,
                            ReservationDateTimeUtc = new DateTime(2023, 3, 16, 12, 0, 0, 0, DateTimeKind.Utc),
                            ReservationFromUtc = new DateTime(2023, 3, 17, 12, 0, 0, 0, DateTimeKind.Utc),
                            ReservationStatus = "Confirmed",
                            ReservationToUtc = new DateTime(2023, 3, 17, 14, 0, 0, 0, DateTimeKind.Utc),
                            SpaceId = 1L,
                            TenantUserId = 2L,
                            TotalPrice = "100"
                        },
                        new
                        {
                            Id = 2L,
                            PriceSpecificationId = 1L,
                            ReservationDateTimeUtc = new DateTime(2023, 3, 17, 12, 0, 0, 0, DateTimeKind.Utc),
                            ReservationFromUtc = new DateTime(2023, 3, 18, 12, 0, 0, 0, DateTimeKind.Utc),
                            ReservationStatus = "Confirmed",
                            ReservationToUtc = new DateTime(2023, 3, 18, 15, 0, 0, 0, DateTimeKind.Utc),
                            SpaceId = 1L,
                            TenantUserId = 3L,
                            TotalPrice = "100"
                        });
                });

            modelBuilder.Entity("AlgoTecture.Domain.Models.RepositoryModels.Space", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("SpaceAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("SpaceProperty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UtilizationTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Latitude");

                    b.HasIndex("Longitude");

                    b.HasIndex("UtilizationTypeId");

                    b.ToTable("Spaces");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Latitude = 47.361812591552734,
                            Longitude = 8.5370702743530273,
                            SpaceAddress = "Mythenquai 7, 8002 Zürich",
                            SpaceProperty = "{\"SpacePropertyId\":\"4c4f455c-bc98-47da-9f4b-9dcc25a17fe5\",\"Name\":\"Santa María\",\"Description\":\"best boat in the world\",\"Properties\":null,\"OwnerId\":0,\"ContractId\":0,\"SubSpaces\":null}",
                            UtilizationTypeId = 12
                        },
                        new
                        {
                            Id = 2L,
                            Latitude = 47.361648559570312,
                            Longitude = 8.5366735458374023,
                            SpaceAddress = "Mythenquai 9, 8002 Zürich",
                            SpaceProperty = "{\"SpacePropertyId\":\"7d2dc2f3-4f52-4244-8ade-73eba2772a51\",\"Name\":\"Niña\",\"Description\":\"best boat in the world\",\"Properties\":null,\"OwnerId\":0,\"ContractId\":0,\"SubSpaces\":null}",
                            UtilizationTypeId = 12
                        },
                        new
                        {
                            Id = 3L,
                            Latitude = 47.361316680908203,
                            Longitude = 8.5362958908081055,
                            SpaceAddress = "Mythenquai 25, 8002 Zürich",
                            SpaceProperty = "{\"SpacePropertyId\":\"a5f8e388-0c2f-491c-82ff-d4c92da97aaa\",\"Name\":\"Pinta\",\"Description\":\"best boat in the world\",\"Properties\":null,\"OwnerId\":0,\"ContractId\":0,\"SubSpaces\":null}",
                            UtilizationTypeId = 12
                        });
                });

            modelBuilder.Entity("AlgoTecture.Domain.Models.RepositoryModels.TelegramUserInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("TelegramChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("TelegramUserFullName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long?>("TelegramUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("TelegramUserName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("TelegramUserInfos");
                });

            modelBuilder.Entity("AlgoTecture.Domain.Models.RepositoryModels.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Phone")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long?>("TelegramUserInfoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("TelegramUserInfoId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateDateTimeUtc = new DateTime(2023, 2, 20, 21, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2L,
                            CreateDateTimeUtc = new DateTime(2023, 3, 13, 21, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3L,
                            CreateDateTimeUtc = new DateTime(2023, 3, 13, 21, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4L,
                            CreateDateTimeUtc = new DateTime(2023, 3, 15, 21, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("AlgoTecture.Domain.Models.RepositoryModels.UserAuthentication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAuthentications");
                });

            modelBuilder.Entity("AlgoTecture.Domain.Models.RepositoryModels.UtilizationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("UtilizationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Residential"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Сommercial"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Production"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Warehouse"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Public catering"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Utility"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Office space"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Education"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Free target"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Parking"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Boat"
                        });
                });

            modelBuilder.Entity("AlgoTecture.Domain.Models.RepositoryModels.Contract", b =>
                {
                    b.HasOne("AlgoTecture.Domain.Models.RepositoryModels.User", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoTecture.Domain.Models.RepositoryModels.PriceSpecification", "PriceSpecification")
                        .WithMany()
                        .HasForeignKey("PriceSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoTecture.Domain.Models.RepositoryModels.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId");

                    b.HasOne("AlgoTecture.Domain.Models.RepositoryModels.Space", "Space")
                        .WithMany()
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoTecture.Domain.Models.RepositoryModels.User", "TenantUser")
                        .WithMany()
                        .HasForeignKey("TenantUserId");

                    b.HasOne("AlgoTecture.Domain.Models.RepositoryModels.UtilizationType", "UtilizationType")
                        .WithMany()
                        .HasForeignKey("UtilizationTypeId");

                    b.Navigation("OwnerUser");

                    b.Navigation("PriceSpecification");

                    b.Navigation("Reservation");

                    b.Navigation("Space");

                    b.Navigation("TenantUser");

                    b.Navigation("UtilizationType");
                });

            modelBuilder.Entity("AlgoTecture.Domain.Models.RepositoryModels.PriceSpecification", b =>
                {
                    b.HasOne("AlgoTecture.Domain.Models.RepositoryModels.Space", "Space")
                        .WithMany()
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("AlgoTecture.Domain.Models.RepositoryModels.Reservation", b =>
                {
                    b.HasOne("AlgoTecture.Domain.Models.RepositoryModels.PriceSpecification", "PriceSpecification")
                        .WithMany()
                        .HasForeignKey("PriceSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoTecture.Domain.Models.RepositoryModels.Space", "Space")
                        .WithMany()
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlgoTecture.Domain.Models.RepositoryModels.User", "TenantUser")
                        .WithMany()
                        .HasForeignKey("TenantUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceSpecification");

                    b.Navigation("Space");

                    b.Navigation("TenantUser");
                });

            modelBuilder.Entity("AlgoTecture.Domain.Models.RepositoryModels.Space", b =>
                {
                    b.HasOne("AlgoTecture.Domain.Models.RepositoryModels.UtilizationType", "UtilizationType")
                        .WithMany()
                        .HasForeignKey("UtilizationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UtilizationType");
                });

            modelBuilder.Entity("AlgoTecture.Domain.Models.RepositoryModels.User", b =>
                {
                    b.HasOne("AlgoTecture.Domain.Models.RepositoryModels.TelegramUserInfo", "TelegramUserInfo")
                        .WithMany()
                        .HasForeignKey("TelegramUserInfoId");

                    b.Navigation("TelegramUserInfo");
                });

            modelBuilder.Entity("AlgoTecture.Domain.Models.RepositoryModels.UserAuthentication", b =>
                {
                    b.HasOne("AlgoTecture.Domain.Models.RepositoryModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
