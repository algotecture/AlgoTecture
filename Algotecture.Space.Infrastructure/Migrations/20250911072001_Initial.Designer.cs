// <auto-generated />
using System;
using Algotecture.Space.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Algotecture.Space.Infrastructure.Migrations
{
    [DbContext(typeof(SpaceDbContext))]
    [Migration("20250911072001_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Algotecture.Space.Domain.Space", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Area")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DataSource")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("SpaceAddress")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("SpaceProperties")
                        .HasColumnType("text");

                    b.Property<int>("SpaceTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("SpaceTypeId");

                    b.HasIndex("Latitude", "Longitude");

                    b.ToTable("Spaces", (string)null);
                });

            modelBuilder.Entity("Algotecture.Space.Domain.SpaceImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Path")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<long>("SpaceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SpaceId");

                    b.ToTable("SpaceImages", (string)null);
                });

            modelBuilder.Entity("Algotecture.Space.Domain.SpaceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("SpaceTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Parking"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Coworking"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Boat"
                        });
                });

            modelBuilder.Entity("Algotecture.Space.Domain.Space", b =>
                {
                    b.HasOne("Algotecture.Space.Domain.Space", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Algotecture.Space.Domain.SpaceType", "SpaceType")
                        .WithMany()
                        .HasForeignKey("SpaceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("SpaceType");
                });

            modelBuilder.Entity("Algotecture.Space.Domain.SpaceImage", b =>
                {
                    b.HasOne("Algotecture.Space.Domain.Space", "Space")
                        .WithMany("Images")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Algotecture.Space.Domain.Space", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
